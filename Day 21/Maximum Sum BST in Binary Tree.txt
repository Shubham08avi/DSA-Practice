Maximum Sum BST in Binary Tree
------------------------------------------------------------------------------------------------------------------------------------------
Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:
1. The left subtree of a node contains only nodes with keys less than the node's key.
2. The right subtree of a node contains only nodes with keys greater than the node's key.
3. Both the left and right subtrees must also be binary search trees.

Example 1:
		  1
	   /    \
	  4      3
	 / \    / \
	2   4  2   5
	          / \
			 4   6
Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.

Example 2:
		4
	   / 
	  3  
	 /  \
    1    2
Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.

Example 3:
Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.
------------------------------------------------------------------------------------------------------------------------------------------
Approach 1:

TC : O(log n)
SC : O(N)

int maxSumBST(TreeNode* root) {

}